/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['AppController_getHello'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/comandas': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Obtener comandas con filtros
     * @description Obtiene una lista paginada de comandas con filtros opcionales
     */
    get: operations['ComandaController_obtenerComandas'];
    put?: never;
    /**
     * Crear una nueva comanda
     * @description Crea una nueva comanda con sus items, cliente, personal y métodos de pago
     */
    post: operations['ComandaController_crearComanda'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/comandas/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Obtener comanda por ID
     * @description Obtiene una comanda específica con todas sus relaciones
     */
    get: operations['ComandaController_obtenerComanda'];
    /**
     * Actualizar comanda
     * @description Actualiza una comanda existente con los datos proporcionados
     */
    put: operations['ComandaController_actualizarComanda'];
    post?: never;
    /**
     * Eliminar comanda (soft delete)
     * @description Elimina una comanda de forma lógica (soft delete)
     */
    delete: operations['ComandaController_eliminarComanda'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/comandas/numero/{numero}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Obtener comanda por número
     * @description Obtiene una comanda específica por su número único
     */
    get: operations['ComandaController_obtenerComandaPorNumero'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/comandas/{id}/restaurar': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Restaurar comanda eliminada
     * @description Restaura una comanda que fue eliminada (soft delete)
     */
    post: operations['ComandaController_restaurarComanda'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/comandas/{id}/estado': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Cambiar estado de comanda
     * @description Cambia el estado de una comanda (pendiente, en_proceso, completado, cancelado)
     */
    put: operations['ComandaController_cambiarEstadoComanda'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/comandas/estadisticas/resumen': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Obtener estadísticas de comandas
     * @description Obtiene un resumen estadístico de las comandas
     */
    get: operations['ComandaController_obtenerEstadisticas'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/comandas/exportar': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Exportar comandas
     * @description Exporta las comandas filtradas en formato CSV, PDF o Excel
     */
    get: operations['ComandaController_exportarComandas'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/tipos-comanda': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener todos los tipos de comanda activos */
    get: operations['TipoComandaController_findAll'];
    put?: never;
    /** Crear un nuevo tipo de comanda */
    post: operations['TipoComandaController_crear'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/tipos-comanda/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener un tipo de comanda por ID */
    get: operations['TipoComandaController_findOne'];
    put?: never;
    post?: never;
    /** Eliminar lógicamente un tipo de comanda */
    delete: operations['TipoComandaController_eliminar'];
    options?: never;
    head?: never;
    /** Actualizar un tipo de comanda */
    patch: operations['TipoComandaController_actualizar'];
    trace?: never;
  };
  '/api/tipos-comanda/{id}/restaurar': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Restaurar un tipo de comanda eliminado */
    post: operations['TipoComandaController_restaurar'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/tipos-item': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener todos los tipos de item activos */
    get: operations['TipoItemController_findAll'];
    put?: never;
    /** Crear un nuevo tipo de item */
    post: operations['TipoItemController_crear'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/tipos-item/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener un tipo de item por ID */
    get: operations['TipoItemController_findOne'];
    put?: never;
    post?: never;
    /** Eliminar lógicamente un tipo de item */
    delete: operations['TipoItemController_eliminar'];
    options?: never;
    head?: never;
    /** Actualizar un tipo de item */
    patch: operations['TipoItemController_actualizar'];
    trace?: never;
  };
  '/api/tipos-item/{id}/restaurar': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Restaurar un tipo de item eliminado */
    post: operations['TipoItemController_restaurar'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auditoria': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['AuditoriaController_obtenerAuditoria'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auditoria/usuario/{usuarioId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['AuditoriaController_obtenerAuditoriaPorUsuario'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auditoria/modulo/{modulo}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['AuditoriaController_obtenerAuditoriaPorModulo'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Iniciar sesión */
    post: operations['AuthController_login'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Registrar nuevo usuario (solo administradores) */
    post: operations['AuthController_register'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/profile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener perfil del usuario autenticado */
    get: operations['AuthController_getProfile'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/cajas/balance/{caja}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener balance de una caja */
    get: operations['CajaController_obtenerBalanceCaja'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/cajas/movimiento': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Crear un movimiento de caja (ingreso/egreso/ajuste) */
    post: operations['CajaController_crearMovimiento'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/cajas/movimientos': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener movimientos de caja con filtros */
    get: operations['CajaController_obtenerMovimientos'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/cajas/transferir': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Transferir comandas entre cajas */
    post: operations['CajaController_transferirEntreCajas'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/cajas/balance-todas': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener balance de todas las cajas */
    get: operations['CajaController_obtenerBalanceTodasLasCajas'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/dolar/cotizacion': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener cotización actual del dólar blue */
    get: operations['DolarController_obtenerCotizacion'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/dolar/historial': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener historial de cotizaciones del dólar */
    get: operations['DolarController_obtenerHistorial'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    CrearItemComandaDto: {
      /**
       * @description ID del producto o servicio
       * @example uuid-del-producto
       */
      productoServicioId: string;
      /**
       * @description Nombre del producto o servicio
       * @example Servicio de consultoría
       */
      nombre: string;
      /**
       * @description ID del tipo de item
       * @example uuid-del-tipo-item
       */
      tipoId: string;
      /**
       * @description Precio unitario
       * @example 100.5
       */
      precio: number;
      /**
       * @description Cantidad
       * @example 2
       */
      cantidad: number;
      /**
       * @description Descuento aplicado
       * @default 0
       * @example 10
       */
      descuento: number;
      /**
       * @description ID del personal asignado
       * @example uuid-del-personal
       */
      personalId: string;
    };
    CrearComandaDto: {
      /**
       * @description Número de comanda
       * @example CMD-2024-001
       */
      numero: string;
      /**
       * @description Fecha de la comanda
       * @example 2024-01-15T10:30:00Z
       */
      fecha: string;
      /**
       * @description Unidad de negocio
       * @example tattoo
       * @enum {string}
       */
      unidadNegocio: 'tattoo' | 'estilismo' | 'formacion';
      /**
       * @description Caja asignada
       * @default caja_1
       * @example caja_1
       * @enum {string}
       */
      enCaja: 'caja_1' | 'caja_2';
      /**
       * @description ID del cliente
       * @example uuid-del-cliente
       */
      clienteId: string;
      /**
       * @description ID del personal principal
       * @example uuid-del-personal-principal
       */
      personalPrincipalId: string;
      /** @description Items de la comanda */
      items: components['schemas']['CrearItemComandaDto'][];
      /**
       * @description IDs de métodos de pago
       * @example [
       *       "uuid-metodo-1",
       *       "uuid-metodo-2"
       *     ]
       */
      metodosPagoIds?: string[];
      /**
       * @description ID del prepago asociado
       * @example uuid-del-prepago
       */
      prepagoId?: string;
      /**
       * @description Subtotal
       * @example 1000
       */
      subtotal?: number;
      /**
       * @description Total de descuentos
       * @example 100
       */
      totalDescuentos?: number;
      /**
       * @description Total de recargos
       * @example 50
       */
      totalRecargos?: number;
      /**
       * @description Total prepago
       * @example 200
       */
      totalPrepago?: number;
      /**
       * @description Total final
       * @example 950
       */
      totalFinal?: number;
      /**
       * @description Estado de la comanda
       * @default pendiente
       * @example pendiente
       * @enum {string}
       */
      estado: 'pendiente' | 'en_proceso' | 'completado' | 'cancelado';
      /**
       * @description ID del tipo de comanda
       * @example uuid-del-tipo-comanda
       */
      tipoId: string;
      /**
       * @description Observaciones
       * @example Cliente solicita atención especial
       */
      observaciones?: string;
    };
    ActualizarItemComandaDto: {
      /** @description ID del item (para actualizar existente) */
      id?: string;
      /** @description ID del producto o servicio */
      productoServicioId?: string;
      /** @description Nombre del producto o servicio */
      nombre?: string;
      /**
       * @description ID del tipo de item
       * @example uuid-del-tipo-item
       */
      tipoId?: string;
      /** @description Precio unitario */
      precio?: number;
      /** @description Cantidad */
      cantidad?: number;
      /** @description Descuento aplicado */
      descuento?: number;
      /** @description ID del personal que realiza el trabajo */
      personalId?: string;
    };
    ActualizarComandaDto: {
      /** @description Número de comanda */
      numero?: string;
      /** @description Fecha de la comanda */
      fecha?: string;
      /**
       * @description Unidad de negocio
       * @enum {string}
       */
      unidadNegocio?: 'tattoo' | 'estilismo' | 'formacion';
      /**
       * @description Caja asignada
       * @enum {string}
       */
      enCaja?: 'caja_1' | 'caja_2';
      /** @description ID del cliente */
      clienteId?: string;
      /** @description ID del personal principal */
      personalPrincipalId?: string;
      /** @description Items de la comanda */
      items?: components['schemas']['ActualizarItemComandaDto'][];
      /** @description IDs de métodos de pago */
      metodosPagoIds?: string[];
      /** @description ID del prepago asociado */
      prepagoId?: string;
      /** @description Subtotal */
      subtotal?: number;
      /** @description Total de descuentos */
      totalDescuentos?: number;
      /** @description Total de recargos */
      totalRecargos?: number;
      /** @description Total prepago */
      totalPrepago?: number;
      /** @description Total final */
      totalFinal?: number;
      /**
       * @description Estado de la comanda
       * @enum {string}
       */
      estado?: 'pendiente' | 'en_proceso' | 'completado' | 'cancelado';
      /**
       * @description ID del tipo de comanda
       * @example uuid-del-tipo-comanda
       */
      tipoId?: string;
      /** @description Observaciones */
      observaciones?: string;
    };
    CrearTipoComandaDto: {
      /**
       * @description Nombre del tipo de comanda
       * @example Ingreso
       */
      nombre: string;
      /**
       * @description Descripción del tipo de comanda
       * @example Comandas de ingreso de dinero
       */
      descripcion?: string;
      /**
       * @description Orden de visualización
       * @default 0
       * @example 1
       */
      orden: number;
      /**
       * @description Si el tipo está activo
       * @default true
       * @example true
       */
      activo: boolean;
    };
    TipoComanda: Record<string, never>;
    ActualizarTipoComandaDto: {
      /**
       * @description Nombre del tipo de comanda
       * @example Ingreso
       */
      nombre?: string;
      /**
       * @description Descripción del tipo de comanda
       * @example Comandas de ingreso de dinero
       */
      descripcion?: string;
      /**
       * @description Orden de visualización
       * @example 1
       */
      orden?: number;
      /**
       * @description Si el tipo está activo
       * @example true
       */
      activo?: boolean;
    };
    CrearTipoItemDto: {
      /**
       * @description Nombre del tipo de item
       * @example Producto
       */
      nombre: string;
      /**
       * @description Descripción del tipo de item
       * @example Productos físicos
       */
      descripcion?: string;
      /**
       * @description Orden de visualización
       * @default 0
       * @example 1
       */
      orden: number;
      /**
       * @description Si el tipo está activo
       * @default true
       * @example true
       */
      activo: boolean;
    };
    TipoItem: Record<string, never>;
    ActualizarTipoItemDto: {
      /**
       * @description Nombre del tipo de item
       * @example Producto
       */
      nombre?: string;
      /**
       * @description Descripción del tipo de item
       * @example Productos físicos
       */
      descripcion?: string;
      /**
       * @description Orden de visualización
       * @example 1
       */
      orden?: number;
      /**
       * @description Si el tipo está activo
       * @example true
       */
      activo?: boolean;
    };
    LoginDto: {
      /**
       * @description Email del usuario
       * @example usuario@ejemplo.com
       */
      email: string;
      /**
       * @description Contraseña del usuario
       * @example password123
       */
      password: string;
    };
    RegisterDto: {
      /**
       * @description Nombre completo del usuario
       * @example Juan Pérez
       */
      nombre: string;
      /**
       * @description Email del usuario
       * @example juan.perez@ejemplo.com
       */
      email: string;
      /**
       * @description Contraseña del usuario
       * @example password123
       */
      password: string;
      /**
       * @description Porcentaje de comisión
       * @example 15.5
       */
      comisionPorcentaje?: number;
      /**
       * @description Si el usuario está activo
       * @example true
       */
      activo?: boolean;
      /**
       * @description Rol del usuario
       * @example user
       * @enum {string}
       */
      rol?: 'admin' | 'user' | 'encargado';
      /**
       * @description Unidades de negocio disponibles
       * @example [
       *       "tattoo",
       *       "estilismo"
       *     ]
       */
      unidadesDisponibles?: ('tattoo' | 'estilismo' | 'formacion')[];
      /**
       * @description Número de teléfono
       * @example +54 11 1234-5678
       */
      telefono?: string;
      /**
       * Format: date-time
       * @description Fecha de ingreso
       * @example 2024-01-15T00:00:00.000Z
       */
      fechaIngreso: string;
    };
    CrearMovimientoCajaDto: Record<string, never>;
    TransferirCajaDto: {
      /**
       * @description Caja de origen
       * @example caja_1
       * @enum {string}
       */
      cajaOrigen: 'caja_1' | 'caja_2';
      /**
       * @description Caja de destino
       * @example caja_2
       * @enum {string}
       */
      cajaDestino: 'caja_1' | 'caja_2';
      /**
       * @description Monto a transferir
       * @example 15000.5
       */
      monto: number;
      /**
       * @description Observaciones de la transferencia
       * @example Transferencia de cierre de día
       */
      observaciones?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  AppController_getHello: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ComandaController_obtenerComandas: {
    parameters: {
      query?: {
        /** @description Número de comanda para búsqueda exacta */
        numero?: string;
        /** @description Fecha de inicio para filtrar comandas */
        fechaInicio?: string;
        /** @description Fecha de fin para filtrar comandas */
        fechaFin?: string;
        /** @description Unidad de negocio */
        unidadNegocio?: 'tattoo' | 'estilismo' | 'formacion';
        /** @description Caja asignada */
        enCaja?: 'caja_1' | 'caja_2';
        /** @description ID del cliente */
        clienteId?: string;
        /** @description ID del personal principal */
        personalPrincipalId?: string;
        /** @description Estado de la comanda */
        estado?: 'pendiente' | 'en_proceso' | 'completado' | 'cancelado';
        /** @description ID del tipo de comanda */
        tipoId?: string;
        /** @description ID del tipo de item de comanda */
        tipoItemId?: string;
        /** @description Monto mínimo para filtrar por total final */
        montoMinimo?: number;
        /** @description Monto máximo para filtrar por total final */
        montoMaximo?: number;
        /** @description Término de búsqueda en observaciones */
        observaciones?: string;
        /** @description Número de página */
        page?: number;
        /** @description Cantidad de elementos por página */
        limit?: number;
        /** @description Campo para ordenar */
        orderBy?: 'fecha' | 'numero' | 'totalFinal' | 'estado' | 'createdAt';
        /** @description Dirección del ordenamiento */
        orderDirection?: 'ASC' | 'DESC';
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Comandas obtenidas exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            comandas?: unknown[];
            total?: number;
            page?: number;
            limit?: number;
            totalPages?: number;
          };
        };
      };
      /** @description Acceso denegado */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ComandaController_crearComanda: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CrearComandaDto'];
      };
    };
    responses: {
      /** @description Comanda creada exitosamente */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            comanda?: Record<string, never>;
            totalItems?: number;
            totalCalculado?: number;
          };
        };
      };
      /** @description Datos inválidos o comanda duplicada */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Acceso denegado */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Cliente o personal no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ComandaController_obtenerComanda: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID de la comanda */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Comanda obtenida exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Acceso denegado */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Comanda no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ComandaController_actualizarComanda: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID de la comanda */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ActualizarComandaDto'];
      };
    };
    responses: {
      /** @description Comanda actualizada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Datos inválidos o comanda duplicada */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Acceso denegado */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Comanda no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ComandaController_eliminarComanda: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID de la comanda */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Comanda eliminada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Acceso denegado */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Comanda no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ComandaController_obtenerComandaPorNumero: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Número de la comanda */
        numero: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Comanda obtenida exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Acceso denegado */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Comanda no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ComandaController_restaurarComanda: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID de la comanda */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Comanda restaurada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description La comanda no está eliminada */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Acceso denegado */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Comanda no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ComandaController_cambiarEstadoComanda: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID de la comanda */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Estado de comanda cambiado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Acceso denegado */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Comanda no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ComandaController_obtenerEstadisticas: {
    parameters: {
      query?: {
        /** @description Fecha de inicio (YYYY-MM-DD) */
        fechaInicio?: string;
        /** @description Fecha de fin (YYYY-MM-DD) */
        fechaFin?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Estadísticas obtenidas exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Acceso denegado */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ComandaController_exportarComandas: {
    parameters: {
      query?: {
        /** @description Filtrar por estado de comanda */
        estado?: 'pendiente' | 'en_proceso' | 'completado' | 'cancelado';
        /** @description Fecha de inicio (YYYY-MM-DD) */
        fechaInicio?: string;
        /** @description Fecha de fin (YYYY-MM-DD) */
        fechaFin?: string;
        /** @description Filtrar por ID de cliente */
        clienteId?: string;
        /** @description Filtrar por ID de personal */
        personalId?: string;
        /** @description Filtrar por unidad de negocio */
        unidadNegocio?: string;
        /** @description Filtrar por ID de tipo */
        tipoId?: string;
        /** @description Filtrar por ID de tipo de item */
        tipoItemId?: string;
        /** @description Formato de exportación (default: csv) */
        formato?: 'csv' | 'pdf' | 'excel';
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Archivo exportado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Formato de exportación no válido */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Acceso denegado */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TipoComandaController_findAll: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Lista de tipos de comanda obtenida exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TipoComanda'][];
        };
      };
    };
  };
  TipoComandaController_crear: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CrearTipoComandaDto'];
      };
    };
    responses: {
      /** @description Tipo de comanda creado exitosamente */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TipoComanda'];
        };
      };
      /** @description Datos inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Ya existe un tipo con ese nombre */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TipoComandaController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Tipo de comanda encontrado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TipoComanda'];
        };
      };
      /** @description Tipo de comanda no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TipoComandaController_eliminar: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Tipo de comanda eliminado exitosamente */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Tipo de comanda no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description No se puede eliminar porque está en uso */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TipoComandaController_actualizar: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ActualizarTipoComandaDto'];
      };
    };
    responses: {
      /** @description Tipo de comanda actualizado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TipoComanda'];
        };
      };
      /** @description Tipo de comanda no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Ya existe un tipo con ese nombre */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TipoComandaController_restaurar: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Tipo de comanda restaurado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TipoComanda'];
        };
      };
      /** @description Tipo de comanda no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description El tipo de comanda no está eliminado */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TipoItemController_findAll: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Lista de tipos de item obtenida exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TipoItem'][];
        };
      };
    };
  };
  TipoItemController_crear: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CrearTipoItemDto'];
      };
    };
    responses: {
      /** @description Tipo de item creado exitosamente */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TipoItem'];
        };
      };
      /** @description Datos inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Ya existe un tipo con ese nombre */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TipoItemController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Tipo de item encontrado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TipoItem'];
        };
      };
      /** @description Tipo de item no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TipoItemController_eliminar: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Tipo de item eliminado exitosamente */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Tipo de item no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description No se puede eliminar porque está en uso */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TipoItemController_actualizar: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ActualizarTipoItemDto'];
      };
    };
    responses: {
      /** @description Tipo de item actualizado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TipoItem'];
        };
      };
      /** @description Tipo de item no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Ya existe un tipo con ese nombre */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TipoItemController_restaurar: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Tipo de item restaurado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TipoItem'];
        };
      };
      /** @description Tipo de item no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description El tipo de item no está eliminado */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuditoriaController_obtenerAuditoria: {
    parameters: {
      query: {
        modulo: string;
        tipoAccion: string;
        usuarioId: string;
        fechaInicio: string;
        fechaFin: string;
        limit: number;
        offset: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuditoriaController_obtenerAuditoriaPorUsuario: {
    parameters: {
      query: {
        usuarioId: string;
        limit: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuditoriaController_obtenerAuditoriaPorModulo: {
    parameters: {
      query: {
        modulo: string;
        limit: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginDto'];
      };
    };
    responses: {
      /** @description Login exitoso */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Credenciales inválidas */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_register: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterDto'];
      };
    };
    responses: {
      /** @description Usuario registrado exitosamente */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Acceso denegado */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Email ya registrado */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_getProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Perfil obtenido exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description No autorizado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CajaController_obtenerBalanceCaja: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Caja a consultar */
        caja: 'caja_1' | 'caja_2';
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Balance obtenido exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Acceso denegado */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CajaController_crearMovimiento: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CrearMovimientoCajaDto'];
      };
    };
    responses: {
      /** @description Movimiento creado exitosamente */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Error en el movimiento */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Acceso denegado */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CajaController_obtenerMovimientos: {
    parameters: {
      query?: {
        /** @description Filtrar por caja */
        caja?: 'caja_1' | 'caja_2';
        /** @description Filtrar por tipo de movimiento */
        tipoMovimiento?:
          | 'ingreso'
          | 'egreso'
          | 'transferencia_entrada'
          | 'transferencia_salida'
          | 'ajuste';
        /** @description Fecha de inicio (YYYY-MM-DD) */
        fechaInicio?: string;
        /** @description Fecha de fin (YYYY-MM-DD) */
        fechaFin?: string;
        /** @description Límite de resultados */
        limit?: number;
        /** @description Offset para paginación */
        offset?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Movimientos obtenidos exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Acceso denegado */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CajaController_transferirEntreCajas: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TransferirCajaDto'];
      };
    };
    responses: {
      /** @description Transferencia exitosa */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Error en la transferencia */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Acceso denegado */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CajaController_obtenerBalanceTodasLasCajas: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Balances obtenidos exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Acceso denegado */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  DolarController_obtenerCotizacion: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Cotización del dólar obtenida exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** @example 1190 */
            compra?: number;
            /** @example 1210 */
            venta?: number;
            /** @example blue */
            casa?: string;
            /** @example Blue */
            nombre?: string;
            /** @example USD */
            moneda?: string;
            /** @example 2025-06-29T20:57:00.000Z */
            fechaActualizacion?: string;
          };
        };
      };
      /** @description Error interno del servidor */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  DolarController_obtenerHistorial: {
    parameters: {
      query?: {
        /** @description Número máximo de registros a retornar (default: 10) */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Historial de cotizaciones obtenido exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** @example 1190 */
            compra?: number;
            /** @example 1210 */
            venta?: number;
            /** @example blue */
            casa?: string;
            /** @example Blue */
            nombre?: string;
            /** @example USD */
            moneda?: string;
            /** @example 2025-06-29T20:57:00.000Z */
            fechaActualizacion?: string;
          }[];
        };
      };
      /** @description Error interno del servidor */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
